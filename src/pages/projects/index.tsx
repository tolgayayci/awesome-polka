import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

import { Combobox } from "@headlessui/react";

// ** Algolia Imports **
import algoliasearch from "algoliasearch";
import {
  InstantSearch,
  SearchBox,
  InfiniteHits,
  Configure,
  HierarchicalMenu,
} from "react-instantsearch-hooks-web";

// ** Custom Components **
import ProjectCard from "../../components/user/Projects/ProjectCard/ProjectCard";

export default function Projects() {
  const searchClient = algoliasearch(
    process.env.NEXT_PUBLIC_ALGOLIA_APPLICATION_ID as string,
    process.env.NEXT_PUBLIC_ALGOLIA_SEARCH_ONLY_API_KEY as string
  );

  const router = useRouter();

  const [selectedItem, setSelectedItem] = useState<string | null>(null);

  function RouteCategory(category: string) {
    router.push(
      `/projects?dev_projects%5BhierarchicalMenu%5D%5Bcategories.lvl0%5D%5B0%5D=${category}`
    );

    window.location.reload();
  }

  useEffect(() => {
    if (router.query) {
      setSelectedItem(
        //@ts-ignore
        router.query["dev_projects[hierarchicalMenu][categories.lvl0][0]"]
      );
    }
  }, [router.query]);

  return (
    <>
      <Head>
        <title>Projects</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <section className="relative container mx-auto scroll-smooth max-w-8xl px-6 md:px-0">
        <InstantSearch
          searchClient={searchClient}
          indexName={
            process.env.NEXT_PUBLIC_ALGOLIA_PROJECTS_INDEX_NAME as string
          }
          routing={true}
        >
          <div className="px-8 md:px-16 lg:px-14 py-14 mb-8 md:mb-16 bg-indigo-200 border-4 border-indigo-900 shadow-md rounded-2xl relative overflow-hidden">
            <Image
              src="/banner-right.svg"
              alt="Bg"
              width={500}
              height={500}
              className="absolute top-0 md:h-full right-0 w-1/2 lg:w-1/3 opacity-60"
            />
            <Image
              src="/banner-left.svg"
              alt="Bg"
              width={500}
              height={500}
              className="absolute top-0 md:h-full left-0 w-1/2 lg:w-1/3 opacity-60"
            />
            <div className="container px-4 relative">
              <div className="max-w-6xl mx-auto">
                <span className="text-md md:text-lg text-left font-extrabold text-indigo-500">
                  AWESOME
                </span>
                <h1 className="text-4xl lg:text-5xl font-extrabold font-heading mt-4 mb-8 text-black border-b-4 border-indigo-900 max-w-lg pb-6">
                  {selectedItem ? selectedItem : "Projects"}
                </h1>
                <SearchBox
                  placeholder={`Search for Awesome ${
                    selectedItem ? selectedItem : "Projects"
                  }`}
                  searchAsYouType={false}
                  submitIconComponent={() => null}
                  resetIconComponent={() => null}
                  classNames={{
                    root: "inline-flex w-full max-w-lg p-1 items-center bg-white border-2 border-indigo-900 rounded-xl shadow bg-opacity-80",
                    input:
                      "w-full bg-transparent text-lg font-extrabold text-indigo-900 placeholder-indigo-900 border-none outline-none text-[16px] md:text-[18px]",
                    form: "w-full",
                  }}
                />
                <div className="max-w-2xl mx-auto"></div>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-3 gap-6 mb-24">
            <Configure analytics={false} hitsPerPage={9} />
            <div className="col-span-3 md:col-span-1 max-w-[320px] hidden md:block">
              <div className="sticky top-[60px]">
                <div className="col-span-1 sticky top-[60px] scroll-smooth">
                  <nav className="space-y-1">
                    <HierarchicalMenu
                      attributes={["categories.lvl0"]}
                      showParentLevel={true}
                      classNames={{
                        root: "-mt-3 mr-0 md:mr-4 hidden md:block",
                        item: "py-3 text-lg font-semibold",
                        label: "flex w-full pl-5",
                        link: "flex w-full",
                        count:
                          "flex-1 text-black text-[14px] mr-4 font-semibold rounded-md my-auto text-indigo-800",
                        selectedItemLink:
                          "py-3 bg-gray-100 border-[3px] border-indigo-900 rounded-xl",
                        childList: "ml-8 -mb-4",
                      }}
                      onClick={(event) => {
                        event.preventDefault();
                        setSelectedItem(
                          //@ts-ignore
                          event.target["firstChild"]["nodeValue"]
                        );
                      }}
                    />
                  </nav>
                </div>
              </div>
            </div>

            <div className="col-span-3 block md:hidden lg:hidden">
              <div className="col-span-1">
                <select
                  id="countries"
                  className="w-full border-[3px] border-indigo-900 text-gray-900 text-[15px] font-semibold rounded-lg py-3"
                  onSelect={(event) => {
                    //@ts-ignore
                    setSelectedItem(event.target.value);
                  }}
                  value={selectedItem as string}
                >
                  <option value="All">All</option>
                  <option value="Analytics">Analytics</option>
                  <option value="Community">Community</option>
                  <option value="DAO">DAO</option>
                  <option value="DeFi">DeFi</option>
                  <option value="Educational">Educational</option>
                  <option value="Platforms">Platforms</option>
                  <option value="Protocols">Protocols</option>
                  <option value="Tools">Tools</option>
                </select>
              </div>
            </div>

            <div className="col-span-3 md:col-span-2 md:-ml-36 mx-auto">
              <div className="container">
                <InfiniteHits
                  showPrevious={false}
                  hitComponent={(e) => <ProjectCard hits={e.hit} />}
                  classNames={{
                    list: "grid grid-cols-3 gap-12",
                    item: "col-span-3 md:col-span-1",
                    disabledLoadMore: "hidden",
                    loadMore:
                      "w-full mt-12 mx-auto text-center inline-block py-4 text-center leading-6 text-lg text-white font-extrabold bg-indigo-800 hover:bg-indigo-900 border-3 border-indigo-900 shadow rounded transition duration-200",
                  }}
                />
              </div>
            </div>
          </div>
        </InstantSearch>
      </section>
    </>
  );
}
